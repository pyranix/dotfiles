#!/bin/bash
#
# Copyright (C) 2024-02 pyranix <pyranix@proton.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Constants
NOTIFY_ID=424242
STACK_TAG=progress
ICON_PATH_VOLUME="$HOME/.notify/images/music.png"
ICON_PATH_MUTE="$HOME/.notify/images/mute.png"
ICON_PATH_UNMUTE="$HOME/.notify/images/music.png"
ICON_PATH_BRIGHTNESS="$HOME/.notify/images/smart-bulb.png"

# Function to show notification using dunst with progress bar
show_notification() {
    local title="$1"
    local message="$2"
    local current_level=""
    local icon_path=""

    case "$title" in
        "Brightness")
            current_level=$(get_brightness)
            icon_path="$ICON_PATH_BRIGHTNESS"
            ;;
        *)
            current_level=$(get_volume)
            icon_path="$ICON_PATH_VOLUME"
            ;;
    esac

    dunstify -u low -i "$icon_path" -r "$NOTIFY_ID" -h int:value:"$current_level" -h string:x-dunst-stacktag:"$STACK_TAG" "$title" "$message Current: $current_level"
}

# Function to get current brightness as a percentage of maximum brightness
get_brightness() {
    local current_brightness=$(brightnessctl g)
    local max_brightness=$(brightnessctl m)
    
    # Calculate the brightness percentage
    local brightness_percentage=$(( (current_brightness * 100) / max_brightness ))

    echo "$brightness_percentage"
}

# Function to get current volume
get_volume() {
    pactl list sinks | awk '/Volume:/{print $5; exit}'
}

# Function to change screen brightness
change_brightness() {
    brightnessctl s "$1" && show_notification "Brightness" "Now"
}

# Function to change volume
change_volume() {
    pactl set-sink-volume @DEFAULT_SINK@ "$1%" && show_notification "Volume" "Now"
}

# Function to toggle mute/unmute volume
toggle_mute() {
    pactl set-sink-mute @DEFAULT_SINK@ toggle
    local is_muted=$(pactl list sinks | awk '/Mute/{print $2; exit}')

    if [ "$is_muted" = "yes" ]; then
        show_notification "Control" "Muted" "$ICON_PATH_MUTE"
    else
        show_notification "Control" "Unmuted" "$ICON_PATH_UNMUTE"
    fi
}

# Main script
case "$#" in
    2)
        case "$1" in
            brightness)
                change_brightness "$2"
                ;;
            volume)
                change_volume "$2"
                ;;
            mute)
                toggle_mute
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $0 <brightness|volume|mute> <value>"
        exit 1
        ;;
esac

exit 0
