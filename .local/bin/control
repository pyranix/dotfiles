#!/bin/sh

# Function to show notification using dunst with progress bar
show_notification() {
    # Define notification title and message
    title="$1"
    message="$2"
    # Extract percentage value from message
    percentage=$(echo "$message" | grep -oE '[0-9]+')

    # Send notification with progress bar
    notify-send "$title" "$message" -h string:x-canonical-private-synchronous:volume -h int:value:$percentage
}

# Function to get current brightness
get_brightness() {
    brightnessctl g
}

# Function to get current volume
get_volume() {
    pactl list sinks | awk '/Volume:/{print $5; exit}'
}

# Function to change screen brightness
change_brightness() {
    brightnessctl s "$1%" # Set brightness to a percentage value
    show_notification "Control" "Brightness: $1%"
}

# Function to change volume
change_volume() {
    pactl set-sink-volume @DEFAULT_SINK@ "$1%" # Set volume to a percentage value
    show_notification "Control" "Volume: $(get_volume)"
}

# Function to toggle mute/unmute volume
toggle_mute() {
    pactl set-sink-mute @DEFAULT_SINK@ toggle
    is_muted=$(pactl list sinks | awk '/Mute/{print $2; exit}')
    if [ "$is_muted" = "yes" ]; then
        show_notification "Control" "Volume: Muted"
    else
        show_notification "Control" "Volume: $(get_volume)"
    fi
}

# Check the number of arguments
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: $0 <brightness|volume|mute> [+inc|-dec|inc+|dec-|x]"
    exit 1
fi

case $1 in
    brightness)
        change_brightness "$2"
        ;;
    volume)
        change_volume "$2"
        ;;
    mute)
        if [ "$2" = "x" ]; then
            toggle_mute
        else
            echo "Invalid argument for mute. Use 'x' to toggle mute/unmute."
            exit 1
        fi
        ;;
    *)
        echo "Unknown option: $1"
        exit 1
        ;;
esac

exit 0
