#!/bin/bash

# Constants
NOTIFY_ID=424242
STACK_TAG=progress
SLEEP_DURATION=0.1
ICON_PATH_VOLUME="$HOME/.notify/images/music.png"
ICON_PATH_MUTE="$HOME/.notify/images/mute.png"
ICON_PATH_UNMUTE="$HOME/.notify/images/music.png"
ICON_PATH_BRIGHTNESS="$HOME/.notify/images/smart-bulb.png"

# Function to show notification using dunst with progress bar
show_notification() {
    local title="$1"
    local message="$2"
    local current_level=""
    local icon_path=""

    if [ "$title" = "Brightness" ]; then
        current_level=$(get_brightness)
        icon_path="$ICON_PATH_BRIGHTNESS"
    else
        current_level=$(get_volume)
        icon_path="$ICON_PATH_VOLUME"
    fi

    notify-send -u low -i "$icon_path" -r "$NOTIFY_ID" -h int:value:"$current_level" -h string:x-dunst-stacktag:"$STACK_TAG" "$title" "$message Current: $current_level"
}

# Function to get current brightness as a percentage of maximum brightness
get_brightness() {
    local current_brightness=$(brightnessctl g)
    local max_brightness=$(brightnessctl m)
    echo $(( (current_brightness * 100) / max_brightness ))
}

# Function to get current volume
get_volume() {
    pactl list sinks | awk '/Volume:/{print $5; exit}'
}

# Function to change screen brightness
change_brightness() {
    brightnessctl s "$1" && sleep "$SLEEP_DURATION" && show_notification "Brightness" "Now"
}

# Function to change volume
change_volume() {
    pactl set-sink-volume @DEFAULT_SINK@ "$1%" && sleep "$SLEEP_DURATION" && show_notification "Volume" "Now"
}

# Function to toggle mute/unmute volume
toggle_mute() {
    pactl set-sink-mute @DEFAULT_SINK@ toggle
    local is_muted=$(pactl list sinks | awk '/Mute/{print $2; exit}')

    if [ "$is_muted" = "yes" ]; then
        show_notification "Control" "Muted" "$ICON_PATH_MUTE"
    else
        show_notification "Control" "Unmuted" "$ICON_PATH_UNMUTE"
    fi
}

# Main script

# Check the number of arguments
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: $0 <brightness|volume|mute> [+inc|-dec|inc+|dec-|x]"
    exit 1
fi

# Handle command line arguments
case $1 in
    brightness)
        change_brightness "$2"
        ;;
    volume)
        change_volume "$2"
        ;;
    mute)
        if [ "$2" = "x" ]; then
            toggle_mute
        else
            echo "Invalid argument for mute. Use 'x' to toggle mute/unmute."
            exit 1
        fi
        ;;
    *)
        echo "Unknown option: $1"
        exit 1
        ;;
esac

exit 0
